'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSpacingFromTheme = getSpacingFromTheme;
exports._m = _m;
exports._mx = _mx;
exports._my = _my;
exports._mt = _mt;
exports._mr = _mr;
exports._mb = _mb;
exports._ml = _ml;
exports._p = _p;
exports._px = _px;
exports._py = _py;
exports._pt = _pt;
exports._pr = _pr;
exports._pb = _pb;
exports._pl = _pl;

var _styledComponentsBreakpoint = require('styled-components-breakpoint');

var defaultSpacing = {
  '0': '0',
  '1': '0.25rem',
  '2': '0.5rem',
  '3': '1rem',
  '4': '2rem',
  '5': '4rem',
  '6': '8rem'
};
/* global process */
function getSpacingFromTheme(key, theme) {
  var value = theme && theme.spacing && theme.spacing[key] || defaultSpacing[key];
  if (process.env.NODE_ENV !== 'production' && typeof key === 'undefined') {
    console.error('A spacing named "' + key + '" does not exist.'); // eslint-disable-line no-console
    return '0';
  }
  return value;
}

function _m(values, theme) {
  return (0, _styledComponentsBreakpoint.map)(values, function (key) {
    if (typeof key === 'string' || typeof key === 'number') {
      return '\n        margin: ' + getSpacingFromTheme(key, theme) + ';\n      ';
    } else {
      return '';
    }
  });
}

function _mx(values, theme) {
  return (0, _styledComponentsBreakpoint.map)(values, function (key) {
    if (typeof key === 'string' || typeof key === 'number') {
      return '\n        margin-left: ' + getSpacingFromTheme(key, theme) + ';\n        margin-right: ' + getSpacingFromTheme(key, theme) + ';\n      ';
    } else {
      return '';
    }
  });
}

function _my(values, theme) {
  return (0, _styledComponentsBreakpoint.map)(values, function (key) {
    if (typeof key === 'string' || typeof key === 'number') {
      return '\n        margin-top: ' + getSpacingFromTheme(key, theme) + ';\n        margin-bottom: ' + getSpacingFromTheme(key, theme) + ';\n      ';
    } else {
      return '';
    }
  });
}

function _mt(values, theme) {
  return (0, _styledComponentsBreakpoint.map)(values, function (key) {
    if (typeof key === 'string' || typeof key === 'number') {
      return '\n        margin-top: ' + getSpacingFromTheme(key, theme) + ';\n      ';
    } else {
      return '';
    }
  });
}

function _mr(values, theme) {
  return (0, _styledComponentsBreakpoint.map)(values, function (key) {
    if (typeof key === 'string' || typeof key === 'number') {
      return '\n        margin-right: ' + getSpacingFromTheme(key, theme) + ';\n      ';
    } else {
      return '';
    }
  });
}

function _mb(values, theme) {
  return (0, _styledComponentsBreakpoint.map)(values, function (key) {
    if (typeof key === 'string' || typeof key === 'number') {
      return '\n        margin-bottom: ' + getSpacingFromTheme(key, theme) + ';\n      ';
    } else {
      return '';
    }
  });
}

function _ml(values, theme) {
  return (0, _styledComponentsBreakpoint.map)(values, function (key) {
    if (typeof key === 'string' || typeof key === 'number') {
      return '\n      margin-left: ' + getSpacingFromTheme(key, theme) + ';\n      ';
    } else {
      return '';
    }
  });
}

function _p(values, theme) {
  return (0, _styledComponentsBreakpoint.map)(values, function (key) {
    if (typeof key === 'string' || typeof key === 'number') {
      return '\n        padding: ' + getSpacingFromTheme(key, theme) + ';\n      ';
    } else {
      return '';
    }
  });
}

function _px(values, theme) {
  return (0, _styledComponentsBreakpoint.map)(values, function (key) {
    if (typeof key === 'string' || typeof key === 'number') {
      return '\n        padding-left: ' + getSpacingFromTheme(key, theme) + ';\n        padding-right: ' + getSpacingFromTheme(key, theme) + ';\n      ';
    } else {
      return '';
    }
  });
}

function _py(values, theme) {
  return (0, _styledComponentsBreakpoint.map)(values, function (key) {
    if (typeof key === 'string' || typeof key === 'number') {
      return '\n        padding-top: ' + getSpacingFromTheme(key, theme) + ';\n        padding-bottom: ' + getSpacingFromTheme(key, theme) + ';\n      ';
    } else {
      return '';
    }
  });
}

function _pt(values, theme) {
  return (0, _styledComponentsBreakpoint.map)(values, function (key) {
    if (typeof key === 'string' || typeof key === 'number') {
      return '\n        padding-top: ' + getSpacingFromTheme(key, theme) + ';\n      ';
    } else {
      return '';
    }
  });
}

function _pr(values, theme) {
  return (0, _styledComponentsBreakpoint.map)(values, function (key) {
    if (typeof key === 'string' || typeof key === 'number') {
      return '\n        padding-right: ' + getSpacingFromTheme(key, theme) + ';\n      ';
    } else {
      return '';
    }
  });
}

function _pb(values, theme) {
  return (0, _styledComponentsBreakpoint.map)(values, function (key) {
    if (typeof key === 'string' || typeof key === 'number') {
      return '\n        padding-bottom: ' + getSpacingFromTheme(key, theme) + ';\n      ';
    } else {
      return '';
    }
  });
}

function _pl(values, theme) {
  return (0, _styledComponentsBreakpoint.map)(values, function (key) {
    if (typeof key === 'string' || typeof key === 'number') {
      return '\n        padding-left: ' + getSpacingFromTheme(key, theme) + ';\n      ';
    } else {
      return '';
    }
  });
}